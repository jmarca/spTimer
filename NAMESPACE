useDynLib(spTimer, .registration = TRUE)
#useDynLib(spTimer, .registration = TRUE, .fixes = "C_")

import(coda)
import(sp)
import(spacetime)

importFrom("grDevices", "dev.new")
importFrom("graphics", "abline", "legend", "par", "points", "segments",
     "title")
importFrom("stats", "acf", "as.formula", "contrasts", "density",
     "dist", "is.empty.model", "lm", "median", "model.frame",
     "model.matrix", "model.response", "na.exclude", "na.omit",
     "na.pass", "pacf", "qqline", "qqnorm", "quantile", "sd",
     "terms", "terms.formula", "ts")
importFrom("utils", "read.table")
importFrom("stats", "rnorm")
importFrom("stats", "rgamma")


S3method(print,spT)
S3method(print,spTpred)
S3method(print,spTfore)

S3method(predict,spT)

S3method(summary,spT)
S3method(plot,spT)
S3method(coef,spT)
S3method(model.frame,spT)
S3method(model.matrix,spT)
S3method(residuals,spT)
S3method(terms,spT)

S3method(as.mcmc,spT)
S3method(confint,spT)
S3method(fitted,spT)
S3method(formula,spT)

exportClasses("spT")

export(
       "spT.Gibbs",
       "spT.decay",
       "spT.priors",
       "spT.time",
       "spT.initials",
       "predict.spT",
       "plot.spT",
       "summary.spT",
       "spT.geodist",
	   "spT.geo.dist",
	   "spT.geo_dist",
       "spT.segment.plot",
       "spT.subset",
       "spT.grid.coords",
       "spT.pCOVER",
       "spT.validation",
       "Formula.matrix",
       "Formula.coords",
       "as.mcmc.spT",
       "as.forecast.object",
       "confint.spT",
	   "coef.spT",
	   "residuals.spT",
	   "print.spT",
       "fitted.spT",
       "formula.spT",
	   "model.frame.spT",
	   "model.matrix.spT",
       "Gamm",
       "Norm",
       "Unif" 
)
